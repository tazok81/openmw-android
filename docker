# syntax=docker/dockerfile:labs
FROM fedora:39

# NDK Clang settings start at line 56

# App versions - change settings here
ENV LIBJPEG_TURBO_VERSION=1.5.3
ENV LIBPNG_VERSION=1.6.37
ENV FREETYPE2_VERSION=2.10.4
ENV OPENAL_VERSION=1.21.1
ENV BOOST_VERSION=1.83.0
ENV LIBICU_VERSION=70-1
ENV FFMPEG_VERSION=4.4
ENV SDL2_VERSION=2.0.22
ENV BULLET_VERSION=3.17
ENV MYGUI_VERSION=3.4.3
ENV GL4ES_VERSION=5ac069d82ad8ca2cc3c574484e4c5bad880db83e
ENV OSG_VERSION=69cfecebfb6dc703b42e8de39eed750a84a87489
ENV LZ4_VERSION=1.9.3
ENV LUAJIT_VERSION=2.1.ROLLING
ENV OPENMW_VERSION=19a6fd4e1be0b9928940a575f00d31b5af76beb5
ENV NDK_VERSION=26.1.10909125
ENV SDK_CMDLINE_TOOLS=10406996_latest
ENV PLATFORM_TOOLS_VERSION=29.0.0
ENV JAVA_VERSION=17

# Android API Settings
ENV API=21

RUN dnf install -y copr-cli dnf-plugins-core && dnf copr enable -y dturner/OpenMW-Deps
RUN dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
    && dnf install -y xz unshield bzip2 unshield-devel mygui mygui-devel unzip openCOLLADA OpenSceneGraph-OMW recastnavigation bullet redhat-lsb-core doxygen openal-devel SDL2-devel qt5-qtbase-devel nano git boost-devel java-$JAVA_VERSION-openjdk\
    ffmpeg-devel ffmpeg-libs gcc-c++ tinyxml-devel cmake lz4-devel zlib-devel freetype-devel luajit-devel libXt-devel

ENV JAVA_HOME='/usr/lib/jvm/java-17-openjdk-17.0.9.0.9-3.fc39.x86_64'


RUN wget https://dl.google.com/android/repository/commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip && unzip commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip && mkdir -p ~/Android/cmdline-tools/ && mv cmdline-tools/ ~/Android/cmdline-tools/latest && rm commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip
RUN yes | ~/Android/cmdline-tools/latest/bin/sdkmanager --licenses
RUN ~/Android/cmdline-tools/latest/bin/sdkmanager --install "ndk;$NDK_VERSION" --channel=0
RUN ~/Android/cmdline-tools/latest/bin/sdkmanager --install "build-tools;$PLATFORM_TOOLS_VERSION"
#COPY --chmod=0755 build.sh /
COPY --chmod=0755 openmw-android /openmw-android
#COPY --chmod=0755 patches /patches

ENV PATH=$PATH:~/Android/cmdline-tools/latest/bin/
ENV PATH=$PATH:~/Android/platform-tools/
ENV PATH=$PATH:~/Android/ndk/$NDK_VERSION/

# Setup ICU
RUN set -e && mkdir -p $HOME/downloads/ && cd $_ && wget https://github.com/unicode-org/icu/archive/refs/tags/release-$LIBICU_VERSION.zip && unzip release-$LIBICU_VERSION.zip
RUN mkdir -p $HOME/build/icu-host-build && cd $_ && $HOME/downloads/icu-release-$LIBICU_VERSION/icu4c/source/configure --disable-tests --disable-samples --disable-icuio --disable-extras CC="gcc" CXX="g++"
RUN cd $HOME/build/icu-host-build && make -j $(nproc)


#RUN set -e && cd /openmw-android/app/src/main

# set up fake "jni" so that ndk-gdb can find a "valid" Android.mk
RUN mkdir -p /openmw-android/app/src/main/jni
RUN echo LOCAL_PATH := $(call my-dir) > /openmw-android/app/src/main/jni/Android.mk
RUN echo include $(CLEAR_VARS) > /openmw-android/app/src/main/jni/Android.mk
RUN echo LOCAL_MODULE := openmw-android > /openmw-android/app/src/main/jni/Android.mk

#RUN echo "APP_ABI := $ABI" > jni/Android.mk

#RUN rm -f gdb.exec
#RUN echo "shell rm -rf jni" >> gdb.exec
#RUN echo "set solib-search-path ../../../buildscripts/symbols/$ABI/" >> gdb.exec
#RUN echo "set history save on" >> gdb.exec
#RUN echo "set breakpoint pending on" >> gdb.exec

#RUN ndk-gdb --attach is.xyz.omw_nightly.debug -x "gdb.exec"




# NDK Toolchain Settings
ENV TOOLCHAIN=/root/Android/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin
ENV NDK_TRIPLET=aarch64-linux-android
ENV TARGET=armv7a-linux-androideabi
ENV ABI=arm64-v8a
ENV AR=$TOOLCHAIN/llvm-ar
ENV AS=$CC
ENV LD=$TOOLCHAIN/ld
ENV RANLIB=$TOOLCHAIN/llvm-ranlib
ENV STRIP=$TOOLCHAIN/llvm-strip

# Patch it to ensure gcc is never ever never used
RUN rm -f $TOOLCHAIN/$NDK_TRIPLET-gcc
RUN rm -f $TOOLCHAIN/$NDK_TRIPLET-g++

# symlink gcc to clang
RUN ln -s $NDK_TRIPLET$API-clang /$TOOLCHAIN/$NDK_TRIPLET-gcc
RUN ln -s $NDK_TRIPLET$API-clang++ /$TOOLCHAIN/$NDK_TRIPLET-g++


# Global C, CXX and LDFLAGS
ENV CFLAGS="-fPIC -O3"
ENV CXXFLAGS="-fPIC -frtti -fexceptions -O3"
ENV LDFLAGS="-fPIC -Wl,--undefined-version"

#ENV NDKCC=$TOOLCHAIN/$TARGET$API-clang
#ENV NDKCXX=$TOOLCHAIN/$TARGET$API-clang++
#ENV NDK_CXX=$NDK_TRIPLET-clang++
#ENV NDK_CC=$NDK_TRIPLET-clang
#ENV WRAPPER_COMMAND=CC=$NDK_TRIPLET-clang CXX=$NDK_TRIPLET-clang++ PATH=/root/Android/ndk/$NDK_VERSION/

#ENV COMMON_AUTOCONF_FLAGS=--enable=static --disable=shared

ENV NDK_BUILD_FLAGS=NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=/openmw-android/app/src/main/jni/Android.mk APP_PLATFORM=ANDROID_$API APP_ABI=$ABI APP_LD=deprecated LOCAL_LDFLAGS=$LDFLAGS

#ENV LIBICU_FLAGS=--disable-tests --disable-samples --disable-icuio --disable-extras --with-cross-build=/root/build/icu-host-build --host-$TARGET

ENV COMMON_CMAKE_ARGS=-DCMAKE_TOOLCHAIN_FILE=/root/Android/ndk/$NDK_VERSION/build/cmake/android.toolchain.cmake -DANDROID_ABI=$ABI -DANDROID_PLATFORM=ANDROID_$API -DANDROID_STL=c++_shared -DANDROID_LD=deprecated -DANDROID_CPP_FEATURES=rtti\ -exceptions -DCMAKE_BUILD_TYPE=debug -DCMAKE_DEBUG_POSTFIX=

# Setup LIBICU
RUN mkdir -p $HOME/build/icu-prefix && cd $_ && unzip $HOME/downloads/release-$LIBICU_VERSION.zip && $HOME/downloads/icu-release-$LIBICU_VERSION/icu4c/source/configure --enable-static --disable-shared --disable-tests --disable-samples --disable-icuio --disable-extras --with-cross-build=/root/build/icu-host-build --host=$TARGET

# Setup ZLIB_VERSION
ADD https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/zlib-1.3.tar.gz -C /root/build/ && mkdir -p /root/build/zlib-1.3/build && cd $_ && cmake ../ $COMMON_CMAKE_ARGS

# Setup LIBPNG_VERSION
ADD http://prdownloads.sourceforge.net/libpng/libpng-$LIBPNG_VERSION.tar.gz /root/downloads/
#RUN tar xvzf /root/downloads/libpng-$LIBPNG_VERSION.tar.gz /root/build/

# Setup LIBJPEG_TURBO_VERSION
RUN cd /root/build/ && git clone https://github.com/Duron27/libjpeg-turbo && mkdir -p /root/build/libjpeg-turbo/build && cd $_

# Setup FREETYPE2_VERSION
ADD https://download.savannah.gnu.org/releases/freetype/freetype-$FREETYPE2_VERSION.tar.gz /root/downloads/
#RUN tar xvzf /root/downloads/freetype-$FREETYPE2_VERSION.tar.gz -C /root/build/ && cd /root/build/freetype-$FREETYPE2_VERSION/ && ./configure $COMMON_CMAKE_ARGS --with-png=no && make && make install

# Setup OPENAL_VERSION
ADD https://github.com/kcat/openal-soft/archive/$OPENAL_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/$OPENAL_VERSION.tar.gz -C /root/build/ && cd /root/build/openal-soft-$OPENAL_VERSION/build && cmake ../ $COMMON_CMAKE_ARGS -DALSOFT_EXAMPLES=OFF -DALSOFT_COMMON_CMAKE_ARGSS=OFF -DALSOFT_UTILS=OFF -DALSOFT_NO_CONFIG_UTIL=ON -DALSOFT_BACKEND_OPENSL=ON -DALSOFT_BACKEND_WAVE=OFF
#RUN cd /root/build/openal-soft-$OPENAL_VERSION/build && make && make install

#ARG BOOST_FLAGS=-j4 --with-filesystem --with-program_options --with-system --with-iostreams --with-regex --ignore-site-config toolset=clang architecture=${BOOST_ARCH} address-model=${BOOST_ADDRESS_MODEL} cflags=$ENV{CFLAGS} cxxflags=$ENV{CXXFLAGS} variant=release target-os=android threading=multi threadapi=pthread link=static runtime-link=static install COMMAND llvm-ranlib ${prefix}/lib/libboost_filesystem.a COMMAND llvm-ranlib ${prefix}/lib/libboost_program_options.a COMMAND llvm-ranlib ${prefix}/lib/libboost_system.a COMMAND llvm-ranlib ${prefix}/lib/libboost_iostreams.a COMMAND llvm-ranlib ${prefix}/lib/libboost_regex.a

# Setup BOOST_VERSION
ADD https://github.com/boostorg/boost/releases/download/boost-$BOOST_VERSION/boost-$BOOST_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/boost-$BOOST_VERSION.tar.gz -C /root/build/ && cd /root/build/boost-$BOOST_VERSION
#RUN ./bootstrap.sh && ./b2 -j4 --with-filesystem --with-program_options --with-system --with-iostreams --with-regex --ignore-site-config toolset=clang architecture=${BOOST_ARCH} address-model=${BOOST_ADDRESS_MODEL} cflags=$ENV{CFLAGS} cxxflags=$ENV{CXXFLAGS} variant=release target-os=android threading=multi threadapi=pthread link=static runtime-link=static install COMMAND llvm-ranlib ${prefix}/lib/libboost_filesystem.a COMMAND llvm-ranlib ${prefix}/lib/libboost_program_options.a COMMAND llvm-ranlib ${prefix}/lib/libboost_system.a COMMAND llvm-ranlib ${prefix}/lib/libboost_iostreams.a COMMAND llvm-ranlib ${prefix}/lib/libboost_regex.a

# Setup FFMPEG_VERSION
#ADD http://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 /root/downloads/
#RUN tar xjf /root/downloads/ffmpeg-$FFMPEG_VERSION.tar.bz2 -C /root/build/

# Setup SDL2_VERSION
ADD https://www.libsdl.org/release/SDL2-$SDL2_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/SDL2-$SDL2_VERSION.tar.gz -C /root/build/

# Setup BULLET_VERSION
ADD https://github.com/bulletphysics/bullet3/archive/$BULLET_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/$BULLET_VERSION.tar.gz -C /root/build/

# Setup GL4ES_VERSION
ADD https://github.com/ptitSeb/gl4es/archive/$GL4ES_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/$GL4ES_VERSION.tar.gz -C /root/build/

# Setup MYGUI_VERSION
ADD https://github.com/MyGUI/mygui/archive/MyGUI$MYGUI_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/MyGUI$MYGUI_VERSION.tar.gz -C /root/build/

# Setup LZ4_VERSION
ADD https://github.com/lz4/lz4/archive/v$LZ4_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/v$LZ4_VERSION.tar.gz -C /root/build/ && cd $HOME/build/lz4-$LZ4_VERSION && cmake build/cmake -DCMAKE_TOOLCHAIN_FILE=/root/Android/ndk/$NDK_VERSION/build/cmake/android.toolchain.cmake -DANDROID_ABI=$ABI -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF && make && make install

#ENV LUAJIT_MAKE_FLAGS=\
#HOST_CC=gcc -m64 \
#CFLAGS= \
#TARGET_CFLAGS=$CFLAGS \
#CROSS=llvm- \
#STATIC_CC=$NDK_TRIPLET-clang \
#DYNAMIC_CC=$NDK_TRIPLET-clang\ -fPIC \
#TARGET_LD=$NDK_TRIPLET-clang

# Setup LUAJIT_VERSION
ADD https://github.com/luaJit/LuaJIT/archive/v$LUAJIT_VERSION.tar.gz /root/downloads/
#RUN tar xvzf /root/downloads/v$LUAJIT_VERSION.tar.gz -C /root/build/ && cd /root/build/LuaJIT-$LUAJIT_VERSION && make amalg HOST_CC=gcc -m64 CFLAGS= TARGET_CFLAGS=$CFLAGS CROSS=llvm- STATIC_CC=$NDK_TRIPLET-clang DYNAMIC_CC=$NDK_TRIPLET-clang -fPIC TARGET_LD=$NDK_TRIPLET-clang

# Setup LIBXML_VERSION
ADD https://github.com/GNOME/libxml2/archive/refs/tags/v2.12.2.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/v2.12.2.tar.gz -C /root/build/

# Setup LIBCOLLADA_VERSION
ADD https://github.com/rdiankov/collada-dom/archive/v2.5.0.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/v2.5.0.tar.gz -C /root/build/

# Setup OPENSCENEGRAPH_VERSION
ADD https://github.com/openmw/osg/archive/$OSG_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/$OSG_VERSION.tar.gz -C /root/build/

# Setup OPENMW_VERSION
ADD https://github.com/OpenMW/openmw/archive/$OPENMW_VERSION.tar.gz /root/downloads/
RUN tar xvzf /root/downloads/$OPENMW_VERSION.tar.gz -C /root/build/

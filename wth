# syntax=docker/dockerfile:labs
FROM fedora:39

#Set build type : release, debug
ENV BUILD_TYPE=debug

# App versions - change settings here
ENV LIBJPEG_TURBO_VERSION=1.5.3
ENV LIBPNG_VERSION=1.6.37
ENV FREETYPE2_VERSION=2.10.4
ENV OPENAL_VERSION=1.21.1
ENV BOOST_VERSION=1.83.0
ENV LIBICU_VERSION=70-1
ENV FFMPEG_VERSION=4.4
ENV SDL2_VERSION=2.0.22
ENV BULLET_VERSION=3.17
ENV ZLIB_VERSION=1.3
ENV LIBXML2_VERSION=2.9.12
ENV MYGUI_VERSION=3.4.3
ENV GL4ES_VERSION=1.1.4
ENV OSG_VERSION=69cfecebfb6dc703b42e8de39eed750a84a87489
ENV LZ4_VERSION=1.9.3
ENV LUAJIT_VERSION=2.1.ROLLING
ENV OPENMW_VERSION=19a6fd4e1be0b9928940a575f00d31b5af76beb5
ENV NDK_VERSION=26.1.10909125
ENV SDK_CMDLINE_TOOLS=10406996_latest
ENV PLATFORM_TOOLS_VERSION=29.0.0
ENV JAVA_VERSION=17

# NDK Settings
ENV API=21
ENV ABI=arm64-v8a
ENV NDK_TRIPLET=aarch64-linux-android
ENV TARGET=armv7a-linux-androideabi

# NDK Toolchain Settings
ENV TOOLCHAIN=/root/Android/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin
ENV PATH=$PATH:/root/Android/ndk/$NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/
ENV prefix=${CMAKE_INSTALL_PREFIX}

# Global C, CXX and LDFLAGS
ENV CFLAGS="-fPIC -O3"
ENV CXXFLAGS="-fPIC -frtti -fexceptions -O3"
ENV LDFLAGS="-fPIC -Wl,--undefined-version"

ENV COMMON_CMAKE_ARGS="\
-DCMAKE_TOOLCHAIN_FILE=/root/Android/ndk/$NDK_VERSION/build/cmake/android.toolchain.cmake \
-DANDROID_ABI=$ABI \
-DANDROID_PLATFORM=android-$API \
-DANDROID_STL=c++_shared \
-DANDROID_CPP_FEATURES=rtti exceptions \
-DANDROID_ALLOW_UNDEFINED_VERSION_SCRIPT_SYMBOLS=ON \
-DCMAKE_SHARED_LINKER_FLAGS=$LDFLAGS \
-DCMAKE_BUILD_TYPE=$BUILD_TYPE \
-DCMAKE_DEBUG_POSTFIX= \
-DCMAKE_INSTALL_PREFIX=${prefix} \
-DCMAKE_FIND_ROOT_PATH=${prefix}"

ENV COMMON_AUTOCONF_FLAGS="--enable-static --disable-shared --prefix=${prefix}"

ENV NDK_BUILD_FLAGS="\
NDK_PROJECT_PATH=. \
APP_BUILD_SCRIPT=./Android.mk \
APP_PLATFORM=$API \
APP_ABI=$ABI APP_LD=deprecated \
LOCAL_LDFLAGS=$LDFLAGS"

ENV LIBICU_FLAGS="\
--disable-tests \
--disable-samples \
--disable-icuio \
--disable-extras \
--with-cross-build=/root/build/icu-host-build"

ENV OPENAL_FLAGS="\
-DALSOFT_EXAMPLES=OFF \
-DALSOFT_TESTS=OFF \
-DALSOFT_UTILS=OFF \
-DALSOFT_NO_CONFIG_UTIL=ON \
-DALSOFT_BACKEND_OPENSL=ON \
-DALSOFT_BACKEND_WAVE=OFF"

ENV BOOST_FLAGS="-j4 \
--with-filesystem \
--with-program_options \
--with-system \
--with-iostreams \
--with-regex \
--ignore-site-config \
--toolset=clang \
--architecture=arm \
--address-model=64 \
--cflags=CFLAGS \
--cxxflags=CXXFLAGS \
--variant=release \
--target-os=android \
--threading=multi \
--threadapi=pthread \
--link=static \
--runtime-link=static \
--install"

ENV FFMPEG_FLAGS="--disable-asm \
--disable-optimizations \
--target-os=android \
--enable-cross-compile \
--cross-prefix=$TOOLCHAIN/llvm- \
--cc=$TOOLCHAIN/aarch64-linux-android$API-clang \
--arch=arm64 \
--cpu=armv8-a \
--enable-version3 \
--enable-pic \
--disable-everything \
--disable-doc \
--disable-programs \
--disable-autodetect \
--disable-iconv \
--enable-decoder=mp3 \
--enable-demuxer=mp3 \
--enable-decoder=bink \
--enable-decoder=binkaudio_rdft \
--enable-decoder=binkaudio_dct \
--enable-demuxer=bink \
--enable-demuxer=wav \
--enable-decoder=pcm_* \
--enable-decoder=vp8 \
--enable-decoder=vp9 \
--enable-decoder=opus \
--enable-decoder=vorbis \
--enable-demuxer=matroska \
--enable-demuxer=ogg"

ENV BULLET_FLAGS="\
-DBUILD_BULLET2_DEMOS=OFF \
-DBUILD_CPU_DEMOS=OFF \
-DBUILD_UNIT_TESTS=OFF \
-DBUILD_EXTRAS=OFF \
-DUSE_DOUBLE_PRECISION=ON \
-DBULLET2_MULTITHREADING=ON"

ENV MYGUI_FLAGS="\
-DMYGUI_RENDERSYSTEM=1 \
-DMYGUI_BUILD_DEMOS=OFF \
-DMYGUI_BUILD_TOOLS=OFF \
-DMYGUI_BUILD_PLUGINS=OFF \
-DMYGUI_DONT_USE_OBSOLETE=ON \
-DFREETYPE_FT2BUILD_INCLUDE_DIR=/root/build/freetype-$FREETYPE2_VERSION/include/freetype/ \
-DMYGUI_STATIC=ON"

ENV LIBXML_FLAGS="\
-DBUILD_SHARED_LIBS=OFF \
-DLIBXML2_WITH_CATALOG=OFF \
-DLIBXML2_WITH_ICONV=OFF \
-DLIBXML2_WITH_LZMA=OFF \
-DLIBXML2_WITH_PROGRAMS=OFF \
-DLIBXML2_WITH_PYTHON=OFF \
-DLIBXML2_WITH_TESTS=OFF \
-DLIBXML2_WITH_ZLIB=ON"

ENV COLLADA_FLAGS="\
-DBoost_USE_STATIC_LIBS=ON \
-DBoost_USE_STATIC_RUNTIME=ON \
-DBoost_NO_SYSTEM_PATHS=ON \
-DBoost_INCLUDE_DIR=/root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/ \
-DHAVE_STRTOQ=0 \
-DUSE_FILE32API=1 \
-DCMAKE_CXX_FLAGS=-std=gnu++11\ -I${prefix}/include/"

ENV OSG_FLAGS="\
-DOPENGL_PROFILE="GL1" \
-DDYNAMIC_OPENTHREADS=OFF \
-DDYNAMIC_OPENSCENEGRAPH=OFF \
-DBUILD_OSG_PLUGIN_OSG=ON \
-DBUILD_OSG_PLUGIN_DAE=ON \
-DBUILD_OSG_PLUGIN_DDS=ON \
-DBUILD_OSG_PLUGIN_TGA=ON \
-DBUILD_OSG_PLUGIN_BMP=ON \
-DBUILD_OSG_PLUGIN_JPEG=ON \
-DBUILD_OSG_PLUGIN_PNG=ON \
-DBUILD_OSG_PLUGIN_FREETYPE=ON \
-DJPEG_INCLUDE_DIR=/root/build/libjpeg-turbo-$LIBJPEG_TURBO_VERSION \
-DPNG_INCLUDE_DIR=$HOME/build/libpng-$LIBPNG_VERSION \
-DFREETYPE_DIR=$HOME/build/freetype-$FREETYPE2_VERSION \
-DCOLLADA_INCLUDE_DIR=$HOME/build/collada-dom-2.5.0 \
-DCOLLADA_DIR=$HOME/build/collada-dom-2.5.0/1.4 \
-DOSG_CPP_EXCEPTIONS_AVAILABLE=TRUE \
-DOSG_GL1_AVAILABLE=ON \
-DOSG_GL2_AVAILABLE=OFF \
-DOSG_GL3_AVAILABLE=OFF \
-DOSG_GLES1_AVAILABLE=OFF \
-DOSG_GLES2_AVAILABLE=OFF \
-DOSG_GL_LIBRARY_STATIC=OFF \
-DOSG_GL_DISPLAYLISTS_AVAILABLE=OFF \
-DOSG_GL_MATRICES_AVAILABLE=ON \
-DOSG_GL_VERTEX_FUNCS_AVAILABLE=ON \
-DOSG_GL_VERTEX_ARRAY_FUNCS_AVAILABLE=ON \
-DOSG_GL_FIXED_FUNCTION_AVAILABLE=ON \
-DBUILD_OSG_APPLICATIONS=OFF \
-DBUILD_OSG_PLUGINS_BY_DEFAULT=OFF \
-DBUILD_OSG_DEPRECATED_SERIALIZERS=OFF \
-DCMAKE_CXX_FLAGS=-std=gnu++11\ -I${prefix}/include/"

ENV OPENMW_FLAGS="\
-DBUILD_BSATOOL=0 \
-DBUILD_NIFTEST=0 \
-DBUILD_ESMTOOL=0 \
-DBUILD_LAUNCHER=0 \
-DBUILD_MWINIIMPORTER=0 \
-DBUILD_ESSIMPORTER=0 \
-DBUILD_OPENCS=0 \
-DBUILD_NAVMESHTOOL=0 \
-DBUILD_WIZARD=0 \
-DBUILD_MYGUI_PLUGIN=0 \
-DBUILD_BULLETOBJECTTOOL=0 \
-DOPENMW_USE_SYSTEM_SQLITE3=OFF \
-DOPENMW_USE_SYSTEM_YAML_CPP=OFF \
-DOPENMW_USE_SYSTEM_ICU=ON \
-DOPENAL_INCLUDE_DIR=$HOME/build/openal-soft-$OPENAL_VERSION/ \
-DBullet_INCLUDE_DIR=$HOME/build/bullet3-$BULLET_VERSION/ \
-DOSG_STATIC=TRUE \
-DMyGUI_LIBRARY=/lib/libMyGUIEngineStatic.a"

ENV LUAJIT_FLAGS="\
HOST_CC= \
CFLAGS= \
CROSS=llvm- \
STATIC_CC=$TOOLCHAIN/$NDK_TRIPLET$API-clang \
DYNAMIC_CC=$TOOLCHAIN/$NDK_TRIPLET$API-clang\ -fPIC \
TARGET_LD=$TOOLCHAIN/$NDK_TRIPLET$API-clang \
TARGET_STRIP=$TOOLCHAIN/llvm-strip \
TARGET_AR=$TOOLCHAIN/llvm-ar rcus \
PREFIX=$HOME/build/LuaJIT-$LUAJIT_VERSION"

RUN dnf install -y copr-cli dnf-plugins-core && dnf copr enable -y dturner/OpenMW-Deps
RUN dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
    && dnf install -y xz unshield bzip2 unshield-devel mygui mygui-devel unzip openCOLLADA clang OpenSceneGraph-OMW recastnavigation bullet redhat-lsb-core doxygen openal-devel ghc-lzma-devel python-devel SDL2-devel qt5-qtbase-devel nano git boost-devel java-$JAVA_VERSION-openjdk\
    ffmpeg-devel ffmpeg-libs gcc-c++ tinyxml-devel cmake lz4-devel zlib-devel freetype-devel luajit-devel libXt-devel

ENV JAVA_HOME='/usr/lib/jvm/java-17-openjdk-17.0.9.0.9-3.fc39.x86_64'

RUN wget https://dl.google.com/android/repository/commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip && unzip commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip && mkdir -p ~/Android/cmdline-tools/ && mv cmdline-tools/ ~/Android/cmdline-tools/latest && rm commandlinetools-linux-$SDK_CMDLINE_TOOLS.zip
RUN yes | ~/Android/cmdline-tools/latest/bin/sdkmanager --licenses
RUN ~/Android/cmdline-tools/latest/bin/sdkmanager --install "ndk;$NDK_VERSION" --channel=0
RUN ~/Android/cmdline-tools/latest/bin/sdkmanager --install "build-tools;$PLATFORM_TOOLS_VERSION"

#COPY --chmod=0755 openmw-android /openmw-android

ENV PATH=$PATH:/root/Android/cmdline-tools/latest/bin/
ENV PATH=$PATH:/root/Android/platform-tools/
ENV PATH=$PATH:/root/Android/ndk/$NDK_VERSION/
RUN mkdir -p $HOME/build
RUN mkdir -p $HOME/downloads

#Setup ICU for the Host
RUN cd $HOME/downloads && wget https://github.com/unicode-org/icu/archive/refs/tags/release-$LIBICU_VERSION.zip && unzip release-$LIBICU_VERSION.zip
RUN mkdir -p $HOME/build/icu-host-build && cd $_ && $HOME/downloads/icu-release-$LIBICU_VERSION/icu4c/source/configure --disable-tests --disable-samples --disable-icuio --disable-extras CC="gcc" CXX="g++"
#RUN cd $HOME/build/icu-host-build && make -j $(nproc)

# Patch it to ensure gcc is never ever never used
RUN rm -f $TOOLCHAIN/$NDK_TRIPLET-gcc
RUN rm -f $TOOLCHAIN/$NDK_TRIPLET-g++

# symlink gcc to clang
RUN ln -s $NDK_TRIPLET$API-clang $TOOLCHAIN/$NDK_TRIPLET-gcc
RUN ln -s $NDK_TRIPLET$API-clang++ $TOOLCHAIN/$NDK_TRIPLET-g++

# Setup LIBJPEG_TURBO_VERSION
ENV PREFIX=$HOME/build/libjpeg-turbo-$LIBJPEG_TURBO_VERSION
RUN wget -c https://sourceforge.net/projects/libjpeg-turbo/files/$LIBJPEG_TURBO_VERSION/libjpeg-turbo-$LIBJPEG_TURBO_VERSION.tar.gz  -O - | tar -xz -C $HOME/build/ && cd $HOME/build/libjpeg-turbo-$LIBJPEG_TURBO_VERSION && ./configure $COMMON_AUTOCONF_FLAGS --without-simd && make PROGRAMS= && make install-libLTLIBRARIES install-data-am

# Setup LIBPNG_VERSION
ENV PREFIX=$HOME/build/libpng-$LIBPNG_VERSION 
RUN wget -c http://prdownloads.sourceforge.net/libpng/libpng-$LIBPNG_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/libpng-$LIBPNG_VERSION && ./configure $COMMON_AUTOCONF_FLAGS && make PROGRAMS= && make install-libLTLIBRARIES install-data-am

# Setup LIBICU
ENV PREFIX=$HOME/build/icu-release-70-1
RUN cd /root/build && wget https://github.com/unicode-org/icu/archive/refs/tags/release-$LIBICU_VERSION.zip && unzip -o release-$LIBICU_VERSION.zip && rm -rf release-$LIBICU_VERSION.zip
#RUN cd /root/downloads/icu-release-70-1/icu4c/source && ./configure $COMMON_AUTOCONF_FLAGS $LIBICU_FLAGS && make check_PROGRAMS= bin_PROGRAMS= && make install check_PROGRAMS= bin_PROGRAMS=

# Setup FREETYPE2_VERSION
ENV PREFIX=$HOME/build/freetype-$FREETYPE2_VERSION 
RUN wget -c https://download.savannah.gnu.org/releases/freetype/freetype-$FREETYPE2_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/freetype-$FREETYPE2_VERSION && ./configure $COMMON_AUTOCONF_FLAGS --with-png=no && make && make install

# Setup OPENAL_VERSION
ENV PREFIX=$HOME/build/openal-soft-$OPENAL_VERSION
RUN wget -c https://github.com/kcat/openal-soft/archive/$OPENAL_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/openal-soft-$OPENAL_VERSION && cmake . $COMMON_CMAKE_ARGS $OPENAL_FLAGS && make && make install


# Setup ZLIB_VERSION
ENV PREFIX=$HOME/build/zlib-13
RUN wget -c https://github.com/madler/zlib/releases/download/v$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/zlib-$ZLIB_VERSION && wget https://github.com/madler/zlib/commit/01253ecd7e0a01d311670f2d03c61b82fc12d338.patch -O - | git apply && cmake . $COMMON_CMAKE_ARGS && make && make install

# Setup BOOST_VERSION
ENV PREFIX=$HOME/build/boost-$BOOST_VERSION
RUN wget -c https://github.com/boostorg/boost/releases/download/boost-$BOOST_VERSION/boost-$BOOST_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/boost-$BOOST_VERSION && ./bootstrap.sh && ./b2 $BOOST_FLAGS

RUN llvm-ranlib /root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/libboost_filesystem.a
#RUN llvm-ranlib /root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/libboost_program_options.a
#RUN llvm-ranlib /root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/libboost_system.a
#RUN llvm-ranlib /root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/libboost_iostreams.a
#RUN llvm-ranlib /root/build/boost-1.83.0/bin.v2/libs/filesystem/build/clang-linux-17/release/link-static/threading-multi/visibility-hidden/libboost_regex.a

# Setup FFMPEG_VERSION
ENV PREFIX=$HOME/build/ffmpeg-$FFMPEG_VERSION
RUN wget -c http://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 -O - | tar -xjf - -C $HOME/build/ && cd $HOME/build/ffmpeg-$FFMPEG_VERSION && ./configure $FFMPEG_FLAGS && make && make install

# Setup SDL2_VERSION
#RUN wget -c https://www.libsdl.org/release/SDL2-$SDL2_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/SDL2-$SDL2_VERSION && /root/Android/ndk/26.1.10909125/ndk-build  $NDK_BUILD_FLAGS

# Setup BULLET_VERSION
ENV PREFIX=$HOME/build/bullet3-$BULLET_VERSION
RUN wget -c https://github.com/bulletphysics/bullet3/archive/$BULLET_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/bullet3-$BULLET_VERSION && cmake . $COMMON_CMAKE_ARGS $BULLET_FLAGS && make && make install

# Setup GL4ES_VERSION
ENV PREFIX=$HOME/build/gl4es-$GL4ES_VERSION
RUN wget -c https://github.com/ptitSeb/gl4es/archive/v$GL4ES_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/gl4es-$GL4ES_VERSION && /root/Android/ndk/26.1.10909125/ndk-build  $NDK_BUILD_FLAGS

#RUN mkdir -p $PREFIX/lib/ && cp libs/${app_abi}/libGL.so ${prefix}/lib/ && cp -r <SOURCE_DIR>/include ${prefix}/include/gl4es/ && cp -r <SOURCE_DIR>/include ${prefix}/

# Setup MYGUI_VERSION
ENV PREFIX=$HOME/build/mygui-MyGUI$MYGUI_VERSION
RUN wget -c https://github.com/MyGUI/mygui/archive/MyGUI$MYGUI_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/mygui-MyGUI$MYGUI_VERSION && cmake CMake/ $COMMON_CMAKE_ARGS $MYGUI_FLAGS

# Setup LZ4_VERSION
ENV PREFIX=$HOME/build/lz4-$LZ4_VERSION
RUN wget -c https://github.com/lz4/lz4/archive/v$LZ4_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/lz4-$LZ4_VERSION && cmake ./build/cmake/ $COMMON_CMAKE_ARGS -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF && make && make install

# Setup LUAJIT_VERSION
ENV PREFIX=$HOME/build/LuaJIT-$LUAJIT_VERSION
RUN wget -c https://github.com/luaJit/LuaJIT/archive/v$LUAJIT_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/LuaJIT-$LUAJIT_VERSION && make amalg LUAJIT_FLAGS && make install LUAJIT_FLAGS
#RUN bash -c "rm $PREFIX/lib/libluajit*.so*"

# Setup LIBXML_VERSION
ENV PREFIX=$HOME/build/libxml2-$LIBXML2_VERSION
#RUN wget -c https://github.com/GNOME/libxml2/archive/refs/tags/v$LIBXML2_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/libxml2-$LIBXML2_VERSION && cmake . $COMMON_CMAKE_ARGS $LIBXML_FLAGS

# Setup LIBCOLLADA_VERSION
ENV PREFIX=$HOME/build/collada-dom-2.5.0
#RUN wget -c https://github.com/rdiankov/collada-dom/archive/v2.5.0.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/collada-dom-2.5.0

# Setup OPENSCENEGRAPH_VERSION
#RUN wget -c https://github.com/openmw/osg/archive/$OSG_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/osg-$OSG_VERSION
#RUN cd $HOME/build/osg && cmake . $COMMON_CMAKE_ARGS $OSG_FLAGS
#RUN make && make install

# Setup OPENMW_VERSION
#RUN wget -c https://github.com/OpenMW/openmw/archive/$OPENMW_VERSION.tar.gz -O - | tar -xz -C $HOME/build/ && cd $HOME/build/openmw-$OPENMW_VERSION
#RUN cd $HOME/build/openmw && cmake . $COMMON_CMAKE_ARGS $OPENMW_FLAGS
#RUN make

diff --git a/apps/openmw/mwrender/renderingmanager.cpp b/apps/openmw/mwrender/renderingmanager.cpp
index e497fdecd..cc654e629 100644
--- a/apps/openmw/mwrender/renderingmanager.cpp
+++ b/apps/openmw/mwrender/renderingmanager.cpp
@@ -69,6 +69,32 @@
 #include "screenshotmanager.hpp"
 #include "groundcover.hpp"
 
+namespace {
+    class GammaCorrection : public osg::StateAttribute
+    {
+        public :
+            GammaCorrection() : gamma(0) {}
+            GammaCorrection(float gamma_) : gamma(gamma_) {}
+            GammaCorrection(const GammaCorrection& copy,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY)
+                : osg::StateAttribute(copy,copyop), gamma(copy.gamma) {}
+
+            META_StateAttribute(, GammaCorrection, (osg::StateAttribute::Type)123)
+
+            /** Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. */
+            virtual int compare(const StateAttribute& sa) const
+            {
+                throw std::runtime_error("");
+            }
+
+            virtual void apply(osg::State& state) const {
+                glLightModelfv(0x4242,&gamma);
+            }
+
+        private:
+            float gamma;
+    };
+}
+
 namespace MWRender
 {
 
@@ -97,6 +123,19 @@ namespace MWRender
             }
             else
                 stateset->removeAttribute(osg::StateAttribute::POLYGONMODE);
+
+            {
+                static bool init = false;
+                static float gamma = 0;
+                if (!init) {
+                    const char *s = getenv("OPENMW_GAMMA");
+                    if (s)
+                        gamma = atof(s);
+                    init = true;
+                }
+                osg::ref_ptr<GammaCorrection> gammaAttribute = new GammaCorrection(gamma);
+                stateset->setAttribute(gammaAttribute);
+            }
         }
 
         void apply(osg::StateSet* stateset, osg::NodeVisitor*) override
@@ -252,6 +291,10 @@ namespace MWRender
         for (auto itr = shadowDefines.begin(); itr != shadowDefines.end(); itr++)
             globalDefines[itr->first] = itr->second;
 
+        const char *s = getenv("OPENMW_GAMMA");
+        if (s) globalDefines["gamma"] = s;
+            else globalDefines["gamma"] = "1.0";
+
         globalDefines["forcePPL"] = Settings::Manager::getBool("force per pixel lighting", "Shaders") ? "1" : "0";
         globalDefines["clamp"] = Settings::Manager::getBool("clamp lighting", "Shaders") ? "1" : "0";
         globalDefines["preLightEnv"] = Settings::Manager::getBool("apply lighting to environment maps", "Shaders") ? "1" : "0";
@@ -363,6 +406,9 @@ namespace MWRender
 
         mScreenshotManager.reset(new ScreenshotManager(viewer, mRootNode, sceneRoot, mResourceSystem, mWater.get()));
 
+        osg::ref_ptr<GammaCorrection> gamma = new GammaCorrection(1.0);
+        mViewer->getCamera()->getOrCreateStateSet()->setAttribute(gamma);
+
         mViewer->setLightingMode(osgViewer::View::NO_LIGHT);
 
         osg::ref_ptr<osg::LightSource> source = new osg::LightSource;


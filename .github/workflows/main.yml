name: CI

on: [workflow_dispatch, push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        arch: [arm64]

    runs-on: ubuntu-20.04

    env:
      CMAKE_VERSION: 3.19.7

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc-multilib python unzip bzip2 pkg-config doxygen p7zip-full ccache
        cd /home/runner/
        wget https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz
        tar xvf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz

    - name: Build native libraries
      run: |
        export PATH=/home/runner/cmake-$CMAKE_VERSION-Linux-x86_64/bin/:$PATH
        cd buildscripts
        ./build.sh --arch ${{ matrix.arch }}

   - name: Build static libraries
      run: |
        cd buildscripts/prefix/lib && zip boost.zip libboost_*.a && mv boost.zip && echo boost.zip >> $GITHUB_ENV
       
    - name: Build the APK
      run: |
        ARCH=${{ matrix.arch }} source buildscripts/include/version.sh
        sed -i "s/abiFilters.*/abiFilters '$ABI'/" app/build.gradle
        export ANDROID_NDK_HOME=$(pwd)/buildscripts/toolchain/ndk/
        ./gradlew assembleNightlyDebug

    - name: Collect outputs
      id: getfilename
      run: |
        mv app/build/outputs/apk/nightly/debug/omw_debug_*.apk omw-debug-$(git rev-parse --short "$GITHUB_SHA")-${{ matrix.arch }}.apk
        echo "apk_file=$(ls omw-debug-*.apk | sed 's/\(.*\)\..*/\1/')" >> $GITHUB_ENV

    - name: Upload the APK
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.apk_file }}
        path: ${{ env.apk_file }}.apk

    - name: Upload Artifact
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.apk_file }}
        path: ${{ env.apk_file }}.apk
  
    - name: Upload boost library
      uses: actions/upload-artifact@v3
      with:
        name: boost.zip
        path: boost.zip